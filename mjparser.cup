package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;


parser code {:
	
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
:}

init with {:
	errorDetected = false;
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}


terminal PROG, LBRACE, RBRACE;
terminal CONST, SEMI, COMMA, EQUAL;
terminal LBRACKET, RBRACKET;
terminal LPAREN, RPAREN, VOID;
terminal IF, ELSE, DO, WHILE, READ, PRINT;
terminal INC, DEC;
terminal AND, OR;
terminal COLON, QUESTION;
terminal PLUS, MINUS;
terminal NEW;
terminal DOUBLE_EQUAL, DIFFERENT, GREATER, GREATER_EQUAL, LESS, LESS_EQUAL;
terminal MUL, DIV, MOD;

terminal String IDENT;

terminal Integer NUMBER;
terminal String BOOLEAN;
terminal Character CHAR;

terminal String BREAK;
terminal String CONTINUE; 
terminal String RETURN;

nonterminal DeclList, MethodDeclList, Declarations;
nonterminal ConstDecl, ConstList, ConstExpressionList;
nonterminal VarDecl, VarExpressionList, VarIdentifier;
nonterminal FormParsOptional, VarDeclList, StatementList;
nonterminal FormPars, FormParsExpression;
nonterminal Statement, ElseOptional;
nonterminal DesignatorStatement, ActParsOptional;
nonterminal ActPars, ActPar;
nonterminal Assignop;
nonterminal Relop;
nonterminal Addop;
nonterminal Mulop;
nonterminal OrDummy, ConditionEnd, NoElsePart, ElsePart, AfterWhile, AfterDo;
nonterminal ActParsStart;
nonterminal DoWhileEnd, TernaryColon, TernaryEnd;
nonterminal MethParams;

nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgramName, Program;
nonterminal rs.etf.pp1.symboltable.concepts.Obj ConstValue;
nonterminal rs.etf.pp1.symboltable.concepts.Obj MethodDecl, MethodTypeName;
nonterminal rs.etf.pp1.symboltable.concepts.Obj Designator;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, ReturnType, Term, Factor, Expr, ExprTO, ExprTOOptional, Assign;
nonterminal rs.etf.pp1.symboltable.concepts.Struct CondFact, CondTerm, Condition, IfCondition;


precedence left ELSE;



/*---------- Program ----------*/

Program ::= (Program) PROG ProgramName:p DeclList LBRACE MethodDeclList RBRACE;

ProgramName ::= (ProgramName) IDENT:programName;

DeclList ::= (DeclListBasic) DeclList Declarations
			 |
			 (NoDeclList) /*epsilon*/
			 ;

MethodDeclList ::= (MethodDeclListBasic) MethodDeclList MethodDecl
				   |
				   (NoMethodDeclList) /*epsilon*/
				   ;

Declarations ::= (ConstDeclarations) ConstDecl
				 |
				 (VarDeclarations) VarDecl			
				 ;
				 
/*---------- ConstDecl ----------*/
				 
ConstDecl ::= (ConstDecl) CONST Type ConstExpressionList SEMI; 				 
				 
ConstExpressionList ::= (ConstExpressionListMultiple) ConstExpressionList COMMA ConstList
				   		|
				   		(ConstExpressionListSingle) ConstList
				  		;
			 
ConstList ::= (ConstList) IDENT:constName EQUAL ConstValue; 				 
				 
ConstValue ::= (ConstNum) NUMBER:constValue
			   |
			   (ConstChar) CHAR:constValue
			   |
			   (ConstBool) BOOLEAN:constValue
			   ;
	
/*---------- VarDecl ----------*/			   
			   
VarDecl ::= (VarDecl) Type VarExpressionList SEMI;		   
			   
VarExpressionList ::= (VarExpressionListMultiple) VarExpressionList COMMA VarIdentifier			   
			   		  |
			   		  (VarExpressionListSingle) VarIdentifier
			   		  ;
			   
VarIdentifier ::= (VarIdentifierBasic) IDENT:varName
				  |
				  (VarIdentifierArray) IDENT:varName LBRACKET RBRACKET
				  |
				  (VarIdentifierError) error:k
				  {: 
					parser.report_info("Izvrsen oporavak od greske u liniji " + kleft, null);
				  :}					   
				  ; 			   

/*---------- MethodDecl ----------*/			   
			   
MethodDecl ::= (MethodDecl) MethodTypeName LPAREN FormParsOptional MethParams VarDeclList LBRACE StatementList RBRACE;   		

MethParams ::= (MethParams) RPAREN;

MethodTypeName ::= (MethodTypeName) ReturnType:retType IDENT:methName;
				 	
ReturnType ::= (ReturnTypeBasic) Type
			   |
			   (ReturnTypeVoid) VOID
			   ;				 	
							 	
FormParsOptional ::= (FormParsOptionalBasic) FormPars
					 |
					 (NoFormParsOptional) /*epsilon*/
					 ;				 	
				 	
VarDeclList ::= (VarDeclListBasic) VarDeclList VarDecl
				|
				(NoVarDeclList) /*epsilon*/
				; 	
				 	
StatementList ::= (StatementListBasic) StatementList Statement			 	
				  |
				  (NoStatementList) /*epsilon*/
				  ;	

/*---------- FormPars ----------*/				 	

FormPars ::= (FormParsMultiple) FormPars COMMA FormParsExpression
			 |
			 (FormParsSingle) FormParsExpression
			 ;

FormParsExpression ::= (FormParsExpressionBasic) Type:t IDENT:formParsName
					   |
					   (FormParsExpressionArray) Type:t IDENT:formParsName LBRACKET RBRACKET
					   |
					   (FormParsError) error:s
					   {: 
					     parser.report_info("Izvrsen oporavak od greske u liniji " + sleft, null);
					   :}
					   ;

/*---------- Type ----------*/

Type ::= (Type) IDENT:typeName;	

/*---------- Statement ----------*/

Statement ::= (StatementDesignator) DesignatorStatement SEMI
			  |
			  (StatementIf) IF IfCondition ConditionEnd Statement ElseOptional
			  |
			  (StatementDoWhile) DO AfterDo Statement WHILE LPAREN Condition DoWhileEnd ConditionEnd SEMI AfterWhile
			  |
			  (StatementBreak) BREAK SEMI
			  |
			  (StatementContinue) CONTINUE SEMI
			  |
			  (StatementReturn) RETURN ExprTOOptional:t SEMI
			  |
			  (StatementRead) READ LPAREN Designator RPAREN SEMI
			  |
			  (StatementPrint) PRINT LPAREN ExprTO RPAREN SEMI 
			  |
			  (StatementPrintTwoParams) PRINT LPAREN ExprTO COMMA NUMBER RPAREN SEMI 
			  |
			  (StatementBrace) LBRACE StatementList RBRACE
			  |
			  error SEMI:l
			  {:
			  	parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null);
			  :}
			  ;

AfterDo ::= (AfterDo) /*epsilon*/;

AfterWhile ::= (AfterWhile) /*epsilon*/;

DoWhileEnd ::= (DoWhileEnd) RPAREN;		  

IfCondition ::= (CorrectCondition) LPAREN Condition RPAREN
				|
				(ErrorCondition) LPAREN error:e RPAREN 
				{:
			  	  parser.report_error("Izvrsen oporavak do ) u liniji " + eleft, null);
			    :}
			    ;

ConditionEnd ::= (ConditionEnd) /*epsilon*/;
			  
ElseOptional ::= (ElseOptionalBasic) ELSE ElsePart Statement 
				 |
				 (NoElseOptional) NoElsePart /*epsilon*/
				 ;			  

ElsePart ::= (ElsePart) /*epsilon*/;

NoElsePart ::= (NoElsePart) /*epsilon*/;

ExprTOOptional ::= (ExprTOOptionalBasic) ExprTO
				 |
				 (NoExprTOOptional) /*epsilon*/
				 ;

/*---------- DesignatorStatement ----------*/

DesignatorStatement ::= (DesignatorAssign) Designator Assignop Assign
					    |
						(DesignatorActPars) Designator LPAREN ActParsStart ActParsOptional RPAREN  
						|
						(DesignatorInc) Designator INC
						|
						(DesignatorDec) Designator DEC
						;

Assign ::=(CorrectAssign) ExprTO:expr
		  |
		  (ErrorAssign) error:w
		  {: 
			 parser.report_info("Izvrsen oporavak od greske u liniji " + wleft, null);
		  :}
		  ;

ActParsStart ::= (ActParsStart) /*epsilon*/;

ActParsOptional ::= (ActParsOptionalBasic) ActPars
					|
					(NoActParsOptional) /*epsilon*/
					; 
					
/*---------- ActPars ----------*/

ActPars ::= (ActParsMultiple) ActPars COMMA ActPar 
			|
			(ActParsSingle) ActPar
			;

ActPar ::= (ActPar) ExprTO;

/*---------- Condition ----------*/
				 	
Condition ::= (ConditionMultiple) Condition OrDummy CondTerm			 	
			  |
			  (ConditionSingle) CondTerm
			  ;
			  
OrDummy ::= (OrDummy) OR;

/*---------- CondTerm ----------*/
				 	
CondTerm ::= (CondTermMultiple) CondTerm AND CondFact			 	
			 |
			 (CondTermSingle) CondFact
			 ;	  
			  
/*---------- CondFact ----------*/			  
			  
CondFact ::= (CondFactExpr) Expr 
			 |
			 (CondFactRelop) Expr:expr1 Relop Expr:expr2
			 ;		

/*---------- ExprTO ----------*/			  
			  
ExprTO ::= (ExprBasic) Expr 
		   |
		   (ExprTernary) Condition ConditionEnd QUESTION Expr TernaryColon ExprTO TernaryEnd
		   ;										           

TernaryEnd ::= (TernaryEnd) /*epsilon*/;

TernaryColon ::= (TernaryColon) COLON;
		 
Expr ::= (ExprTerm) Term:t
		 |
		 (ExprMinus) MINUS Term:t
		 |
		 (ExprAddop) Expr:te Addop Term:t	  	  
		 ;		 

/*---------- Term ----------*/

Term ::= (TermFactor) Factor
		 |
		 (TermMulop) Term Mulop Factor
		 ;

/*---------- Factor ----------*/

Factor ::= (FactorDesignator) Designator
           |
           (FuncCall) Designator:func LPAREN ActParsStart ActParsOptional RPAREN
           |
           (FactorConst) ConstValue
           |          
           (FactorNew) NEW Type
           |
           (FactorNewArray) NEW Type LBRACKET ExprTO RBRACKET                  
           |
           (FactorExprTO) LPAREN ExprTO RPAREN
           ; 		  

/*---------- Designator ----------*/							 
							 
Designator ::= (DesignatorIdent) IDENT:name
			   |
			   (DesignatorExprTO) Designator LBRACKET ExprTO RBRACKET 
			   ;						 

/*---------- Assignop ----------*/							 
							 
Assignop ::= (Assignop) EQUAL;				 
	
/*---------- Relop ----------*/	
	
Relop ::= (RelopDoubleEqual) DOUBLE_EQUAL
          |
          (RelopDifferent) DIFFERENT
          |
          (RelopGreater) GREATER
          |
          (RelopGreaterEqual) GREATER_EQUAL
          |
          (RelopLess) LESS
          |
          (RelopLessEqual) LESS_EQUAL
          ;	

/*---------- Addop ----------*/	

Addop ::= (AddopPlus) PLUS
          |
          (AddopMinus) MINUS
          ;	
	
/*---------- Mulop ----------*/		
	
Mulop ::= (MulopMul) MUL
          |
          (MulopDiv) DIV
          |
          (MulopMod) MOD
          ;						 						 			