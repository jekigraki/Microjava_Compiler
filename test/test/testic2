public void visit(ModificationHardOne insertIntoSortArray) {
    	// 4
    	
    	Code.put(Code.dup); // 4 4 
    	
    	Code.load(array_we_are_using); // 4 4 niz
    	Code.loadConst(0); // 4 4 niz 0
    	Code.put(Code.aload); // 4 4 niz[0]
    	
    	Code.putFalseJump(Code.gt, Code.pc+1); //********************
    	check_if_greater_than_array_of_zero = Code.pc - 2;
    	
    	// 4
    	
    	Code.put(Code.dup); // 4 4 
    	
    	Code.load(array_we_are_using); // 4 4 niz
    	Code.load(array_we_are_using); // 4 4 niz niz
    	Code.put(Code.arraylength); // 4 4 niz array_len
    	
    	Code.loadConst(1);
    	Code.put(Code.sub); // 4 4 niz (array_len-1)
    	
    	Code.put(Code.aload); // 4 4 niz[array_len-1]
    	
    	Code.putFalseJump(Code.lt, Code.pc+1); //********************
    	check_if_greater_than_array_of_len = Code.pc - 2;
    	
    	// 4
    	
    	Code.loadConst(0);
    	
    	// START : 4 0
    	
    	start_of_loop_one = Code.pc;
    	Code.put(Code.dup); 
    	
    	// 4 0 0 
    	
    	Code.load(array_we_are_using);
    	Code.put(Code.arraylength);
    	
    	// 4 0 0 array_len
    	
    	Code.putFalseJump(Code.lt, Code.pc+1);
    	address_if_we_reached_the_end = Code.pc - 2;
    	
    	// 4 0
    	
    	Code.put(Code.dup);
    	
    	// 4 0 0
    	
    	Code.load(array_we_are_using);
    	
    	// 4 0 0 niz
    	
    	Code.put(Code.dup_x1);
    	Code.put(Code.pop);
    	
    	// 4 0 niz 0
    	
    	Code.put(Code.aload);
    	
    	// 4 0 niz[0]
    	
    	Code.put(Code.dup_x2);
    	Code.put(Code.pop);
    	
    	// niz[0] 4 0
    	
    	Code.loadConst(1);
    	Code.put(Code.add);
    	
    	// niz[0] 4 1
    	
    	Code.put(Code.dup_x2);
    	Code.put(Code.pop);
    	
    	// 1 niz[0] 4 
    	
    	Code.put(Code.dup_x2);
    	
    	// 4 1 niz[0] 4
    	
    	Code.put(Code.dup2);
    	
    	// 4 1 niz[0] 4 niz[0] 4
    	
    	Code.putFalseJump(Code.gt, Code.pc+1); //*********************
    	get_everything_ready_for_start_again = Code.pc-2;
    	
    	// 4 1 niz[0] 4
    	
    	Code.put(Code.pop);
    	
    	// 4 1 niz[0]
    	
    	Code.put(Code.dup_x2);
    	Code.put(Code.pop);
    	
    	// niz[0] 4 1
    	
    	Code.put(Code.dup_x1);
    	
    	// niz[0] 1 4 1
    	
    	Code.loadConst(1);
    	Code.put(Code.sub);
    	
    	// niz[0] 1 4 0
    	
    	Code.put(Code.dup_x1);
    	Code.put(Code.pop);
    	
    	// niz[0] 1 0 4
    	
    	Code.load(array_we_are_using);
    	
    	// niz[0] 1 0 4 niz
    	
    	Code.put(Code.dup_x2);
    	Code.put(Code.pop);
    	
    	// niz[0] 1 niz 0 4 
    	
    	Code.put(Code.astore);
    	
    	// niz[0] 1
    	
    	Code.putJump(start_of_loop_one);
    	
    	Code.fixup(get_everything_ready_for_start_again);
    	
    	// 4 1 niz[0] 4 
    	
    	Code.put(Code.pop);
    	Code.put(Code.pop);

    	// 4 1 
    	
    	Code.putJump(start_of_loop_one);
    	
    	Code.fixup(address_if_we_reached_the_end);
    	
    	// 4 0
    	
    	Code.put(Code.pop);
    	
    	// 4 
    	
    	Code.fixup(check_if_greater_than_array_of_zero);
    	Code.fixup(check_if_greater_than_array_of_len);
    	
    	// 4
    	
    	Code.put(Code.pop);
    }